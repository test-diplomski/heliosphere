// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0--rc2
// source: ratelimiter/rate-limiter.proto

package ratelimiter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RateLimitServiceClient is the client API for RateLimitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RateLimitServiceClient interface {
	CreateRateLimiter(ctx context.Context, in *CreateRateLimiterRequest, opts ...grpc.CallOption) (*RateLimiter, error)
	GetRateLimiter(ctx context.Context, in *GetRateLimiterRequest, opts ...grpc.CallOption) (*RateLimiter, error)
	GetAllRateLimiters(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListOfRateLimiters, error)
	UpdateRateLimiter(ctx context.Context, in *UpdateRateLimiterRequest, opts ...grpc.CallOption) (*RateLimiter, error)
	DeleteRateLimiter(ctx context.Context, in *DeleteRateLimiterRequest, opts ...grpc.CallOption) (*DeleteRateLimiterResponse, error)
	CanRateLimiterAllowRequest(ctx context.Context, in *AllowRequest, opts ...grpc.CallOption) (*AllowResponse, error)
}

type rateLimitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRateLimitServiceClient(cc grpc.ClientConnInterface) RateLimitServiceClient {
	return &rateLimitServiceClient{cc}
}

func (c *rateLimitServiceClient) CreateRateLimiter(ctx context.Context, in *CreateRateLimiterRequest, opts ...grpc.CallOption) (*RateLimiter, error) {
	out := new(RateLimiter)
	err := c.cc.Invoke(ctx, "/ratelimiter.RateLimitService/CreateRateLimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitServiceClient) GetRateLimiter(ctx context.Context, in *GetRateLimiterRequest, opts ...grpc.CallOption) (*RateLimiter, error) {
	out := new(RateLimiter)
	err := c.cc.Invoke(ctx, "/ratelimiter.RateLimitService/GetRateLimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitServiceClient) GetAllRateLimiters(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListOfRateLimiters, error) {
	out := new(ListOfRateLimiters)
	err := c.cc.Invoke(ctx, "/ratelimiter.RateLimitService/GetAllRateLimiters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitServiceClient) UpdateRateLimiter(ctx context.Context, in *UpdateRateLimiterRequest, opts ...grpc.CallOption) (*RateLimiter, error) {
	out := new(RateLimiter)
	err := c.cc.Invoke(ctx, "/ratelimiter.RateLimitService/UpdateRateLimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitServiceClient) DeleteRateLimiter(ctx context.Context, in *DeleteRateLimiterRequest, opts ...grpc.CallOption) (*DeleteRateLimiterResponse, error) {
	out := new(DeleteRateLimiterResponse)
	err := c.cc.Invoke(ctx, "/ratelimiter.RateLimitService/DeleteRateLimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitServiceClient) CanRateLimiterAllowRequest(ctx context.Context, in *AllowRequest, opts ...grpc.CallOption) (*AllowResponse, error) {
	out := new(AllowResponse)
	err := c.cc.Invoke(ctx, "/ratelimiter.RateLimitService/CanRateLimiterAllowRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RateLimitServiceServer is the server API for RateLimitService service.
// All implementations must embed UnimplementedRateLimitServiceServer
// for forward compatibility
type RateLimitServiceServer interface {
	CreateRateLimiter(context.Context, *CreateRateLimiterRequest) (*RateLimiter, error)
	GetRateLimiter(context.Context, *GetRateLimiterRequest) (*RateLimiter, error)
	GetAllRateLimiters(context.Context, *EmptyRequest) (*ListOfRateLimiters, error)
	UpdateRateLimiter(context.Context, *UpdateRateLimiterRequest) (*RateLimiter, error)
	DeleteRateLimiter(context.Context, *DeleteRateLimiterRequest) (*DeleteRateLimiterResponse, error)
	CanRateLimiterAllowRequest(context.Context, *AllowRequest) (*AllowResponse, error)
	mustEmbedUnimplementedRateLimitServiceServer()
}

// UnimplementedRateLimitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRateLimitServiceServer struct {
}

func (UnimplementedRateLimitServiceServer) CreateRateLimiter(context.Context, *CreateRateLimiterRequest) (*RateLimiter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRateLimiter not implemented")
}
func (UnimplementedRateLimitServiceServer) GetRateLimiter(context.Context, *GetRateLimiterRequest) (*RateLimiter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateLimiter not implemented")
}
func (UnimplementedRateLimitServiceServer) GetAllRateLimiters(context.Context, *EmptyRequest) (*ListOfRateLimiters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRateLimiters not implemented")
}
func (UnimplementedRateLimitServiceServer) UpdateRateLimiter(context.Context, *UpdateRateLimiterRequest) (*RateLimiter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRateLimiter not implemented")
}
func (UnimplementedRateLimitServiceServer) DeleteRateLimiter(context.Context, *DeleteRateLimiterRequest) (*DeleteRateLimiterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRateLimiter not implemented")
}
func (UnimplementedRateLimitServiceServer) CanRateLimiterAllowRequest(context.Context, *AllowRequest) (*AllowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanRateLimiterAllowRequest not implemented")
}
func (UnimplementedRateLimitServiceServer) mustEmbedUnimplementedRateLimitServiceServer() {}

// UnsafeRateLimitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RateLimitServiceServer will
// result in compilation errors.
type UnsafeRateLimitServiceServer interface {
	mustEmbedUnimplementedRateLimitServiceServer()
}

func RegisterRateLimitServiceServer(s grpc.ServiceRegistrar, srv RateLimitServiceServer) {
	s.RegisterService(&RateLimitService_ServiceDesc, srv)
}

func _RateLimitService_CreateRateLimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRateLimiterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServiceServer).CreateRateLimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimiter.RateLimitService/CreateRateLimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServiceServer).CreateRateLimiter(ctx, req.(*CreateRateLimiterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitService_GetRateLimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateLimiterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServiceServer).GetRateLimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimiter.RateLimitService/GetRateLimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServiceServer).GetRateLimiter(ctx, req.(*GetRateLimiterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitService_GetAllRateLimiters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServiceServer).GetAllRateLimiters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimiter.RateLimitService/GetAllRateLimiters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServiceServer).GetAllRateLimiters(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitService_UpdateRateLimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRateLimiterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServiceServer).UpdateRateLimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimiter.RateLimitService/UpdateRateLimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServiceServer).UpdateRateLimiter(ctx, req.(*UpdateRateLimiterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitService_DeleteRateLimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRateLimiterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServiceServer).DeleteRateLimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimiter.RateLimitService/DeleteRateLimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServiceServer).DeleteRateLimiter(ctx, req.(*DeleteRateLimiterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitService_CanRateLimiterAllowRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServiceServer).CanRateLimiterAllowRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimiter.RateLimitService/CanRateLimiterAllowRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServiceServer).CanRateLimiterAllowRequest(ctx, req.(*AllowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RateLimitService_ServiceDesc is the grpc.ServiceDesc for RateLimitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RateLimitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ratelimiter.RateLimitService",
	HandlerType: (*RateLimitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRateLimiter",
			Handler:    _RateLimitService_CreateRateLimiter_Handler,
		},
		{
			MethodName: "GetRateLimiter",
			Handler:    _RateLimitService_GetRateLimiter_Handler,
		},
		{
			MethodName: "GetAllRateLimiters",
			Handler:    _RateLimitService_GetAllRateLimiters_Handler,
		},
		{
			MethodName: "UpdateRateLimiter",
			Handler:    _RateLimitService_UpdateRateLimiter_Handler,
		},
		{
			MethodName: "DeleteRateLimiter",
			Handler:    _RateLimitService_DeleteRateLimiter_Handler,
		},
		{
			MethodName: "CanRateLimiterAllowRequest",
			Handler:    _RateLimitService_CanRateLimiterAllowRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ratelimiter/rate-limiter.proto",
}
